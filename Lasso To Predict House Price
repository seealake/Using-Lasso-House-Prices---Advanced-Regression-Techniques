{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":5407,"databundleVersionId":868283,"sourceType":"competition"}],"dockerImageVersionId":30822,"isInternetEnabled":false,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"markdown","source":"# Lasso To Predict House Price","metadata":{}},{"cell_type":"code","source":"import pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/train.csv')\ntest = pd.read_csv('/kaggle/input/house-prices-advanced-regression-techniques/test.csv')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# (1): Data Visualization","metadata":{}},{"cell_type":"code","source":"train.head()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.describe()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.info()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train.isna().sum().sort_values()[-60:-1]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"test.isna().sum().sort_values()[-60:-1]","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"price_class = train.groupby('MSSubClass')['SalePrice'].mean()\nprice_class.plot(kind='bar')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"price_class.plot(kind='line')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"train['SalePrice'].plot()","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.displot(train['SalePrice']);","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='GrLivArea', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='OverallQual', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='YearBuilt', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='GarageArea', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"num_features = train.select_dtypes(include=['int64', 'float64']).columns\ncorrelations = train[num_features].corr()['SalePrice'].sort_values(ascending=False)\nprint(correlations)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"categorical_features = ['Neighborhood', 'HouseStyle', 'SaleCondition', 'ExterQual', 'MSZoning']\nplt.figure(figsize=(15, 12))\nfor index, feature in enumerate(categorical_features, 1):\n    plt.subplot(3, 3, index)\n    average_price = train.groupby(feature)['SalePrice'].mean().sort_values(ascending=False)\n    sns.boxplot(x=feature, y='SalePrice', data=train)\n    plt.xticks(rotation=45, ha='right')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='MSZoning', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='LotShape', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='LandContour', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='LotConfig', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='LandSlope', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='Neighborhood', y='SalePrice')\nplt.xticks(rotation=45, ha='right')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='Condition1', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='BldgType', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='HouseStyle', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='RoofStyle', y='SalePrice')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='Exterior1st', y='SalePrice')\nplt.xticks(rotation=45, ha='right')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"sns.scatterplot(data=train, x='Exterior2nd', y='SalePrice')\nplt.xticks(rotation=45, ha='right')","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# (2): A baseline linear regression model with numeric features","metadata":{}},{"cell_type":"code","source":"from sklearn.linear_model import LinearRegression\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.metrics import mean_squared_error, r2_score\nselected_features = ['OverallQual', 'GrLivArea', '1stFlrSF', 'FullBath', 'TotRmsAbvGrd', 'YearBuilt', 'YearRemodAdd']\nprint(train[selected_features].isnull().sum())\nprint(test[selected_features].isnull().sum())\nX = train[selected_features]\ny = train['SalePrice']\nX_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)\nmodel = LinearRegression()\nmodel.fit(X_train, y_train)\ny_pred = model.predict(X_val)\nmse = mean_squared_error(y_val, y_pred)\nrmse = np.sqrt(mse)\nr2 = r2_score(y_val, y_pred)\n\nprint('Model Performance Metrics:')\nprint(f'RMSE on validation set: ${rmse:,.2f}')\nprint(f'RÂ² Score on validation set: {r2:.4f}')\n\nfeature_importance = pd.DataFrame({\n    'Feature': selected_features,\n    'Coefficient': model.coef_\n})\nprint(\"\\nFeature Importance:\")\nprint(feature_importance.sort_values('Coefficient', ascending=False))\nplt.figure(figsize=(10, 6))\nplt.scatter(y_val, y_pred, alpha=0.5)\nplt.plot([y_val.min(), y_val.max()], [y_val.min(), y_val.max()], 'r--', lw=2)\nplt.xlabel('Actual Prices')\nplt.ylabel('Predicted Prices')\nplt.title('Actual vs Predicted House Prices')\nplt.tight_layout()\nplt.show()\nX_test = test[selected_features]\ntest_predictions = model.predict(X_test)\n\nsubmission = pd.DataFrame({\n    'Id': test['Id'],\n    'SalePrice': test_predictions\n})\nsubmission.to_csv('submission_linear_reg.csv', index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# (3): Feature Engineering with Lasso","metadata":{}},{"cell_type":"code","source":"for train_test in [train, test]:\n    train_test['MSSubClass'] = train_test['MSSubClass'].apply(str)\n    train_test['YrSold'] = train_test['YrSold'].apply(str) \n    train_test['MoSold'] = train_test['MoSold'].apply(str)\n    train_test['Functional'] = train_test['Functional'].fillna('Typ') \n    train_test['Electrical'] = train_test['Electrical'].fillna(\"SBrkr\") \n    train_test['KitchenQual'] = train_test['KitchenQual'].fillna(\"TA\") \n    train_test['Exterior1st'] = train_test['Exterior1st'].fillna(train_test['Exterior1st'].mode()[0]) \n    train_test['Exterior2nd'] = train_test['Exterior2nd'].fillna(train_test['Exterior2nd'].mode()[0]) \n    train_test['SaleType'] = train_test['SaleType'].fillna(train_test['SaleType'].mode()[0]) \n    train_test[\"PoolQC\"] = train_test[\"PoolQC\"].fillna(\"None\") \n    train_test[\"Alley\"] = train_test[\"Alley\"].fillna(\"None\") \n    train_test['FireplaceQu'] = train_test['FireplaceQu'].fillna(\"None\") \n    train_test['Fence'] = train_test['Fence'].fillna(\"None\") \n    train_test['MiscFeature'] = train_test['MiscFeature'].fillna(\"None\")\n\n    train_test['LotFrontage'] = train_test.groupby('Neighborhood')['LotFrontage'].transform(\n    lambda x: x.fillna(x.median())\n    )\n    train_test['MasVnrArea'] = train_test['MasVnrArea'].fillna(0)\n    train_test.loc[train_test['GarageYrBlt'].isnull(), 'GarageYrBlt'] = train_test.loc[\n        train_test['GarageYrBlt'].isnull(), 'YearBuilt'\n    ]\n\n    quality_map = {\n    'Po': 1, 'Fa': 2, 'TA': 3, 'Gd': 4, 'Ex': 5, 'None': 0\n    }\n    quality_cols = ['ExterQual', 'ExterCond', 'BsmtQual', 'BsmtCond', \n                   'HeatingQC', 'KitchenQual', 'FireplaceQu', 'GarageQual', 'GarageCond']\n    \n    for col in quality_cols:\n        if col in train_test.columns:\n            train_test[col] = train_test[col].fillna('None')\n            train_test[col] = train_test[col].map(quality_map)\n\n    exposure_map = {\n        'No': 1, 'Mn': 2, 'Av': 3, 'Gd': 4, 'None': 0\n    }\n    train_test['BsmtExposure'] = train_test['BsmtExposure'].fillna('None')\n    train_test['BsmtExposure'] = train_test['BsmtExposure'].map(exposure_map)\n\n    area_cols = ['BsmtFinSF1', 'BsmtFinSF2', 'BsmtUnfSF', 'TotalBsmtSF', \n                'GarageArea', 'WoodDeckSF', 'OpenPorchSF', 'EnclosedPorch', \n                '3SsnPorch', 'ScreenPorch', 'PoolArea']\n    \n    for col in area_cols:\n        train_test[col] = train_test[col].fillna(0)\n\n    train_test['TotalSF'] = (train_test['TotalBsmtSF'] + \n                            train_test['1stFlrSF'] + \n                            train_test['2ndFlrSF'])\n    ","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"code","source":"from sklearn.ensemble import RandomForestRegressor\nfrom sklearn.compose import ColumnTransformer \nfrom sklearn.pipeline import Pipeline \nfrom sklearn.preprocessing import StandardScaler, OneHotEncoder \nfrom sklearn.impute import SimpleImputer \nfrom sklearn.linear_model import LassoCV \nfrom sklearn.model_selection import cross_val_score\ntrain_imputed = train.copy()\ntest_imputed = test.copy()\n\nnumeric_features = train.select_dtypes(include=['int64', 'float64']).columns.drop('SalePrice')\nfor feature in numeric_features:\n    \n    if train[feature].isnull().sum() > 0 or test[feature].isnull().sum() > 0:\n        train_feature = train.copy()\n        test_feature = test.copy()\n        \n        train_not_null = train_feature[feature].notnull()\n        \n        features_for_imputation = [col for col in numeric_features \n                                 if col != feature and col != 'SalePrice']\n        \n        X_train_impute = train_feature[features_for_imputation].fillna(train_feature[features_for_imputation].median())\n        y_train_impute = train_feature.loc[train_not_null, feature]\n        \n        rf_imputer = RandomForestRegressor(n_estimators=100, random_state=42)\n        rf_imputer.fit(X_train_impute.loc[train_not_null], y_train_impute)\n        \n        missing_indices = train_feature[feature].isnull()\n        if missing_indices.sum() > 0:\n            X_missing = train_feature.loc[missing_indices, features_for_imputation].fillna(train_feature[features_for_imputation].median())\n            train_imputed.loc[missing_indices, feature] = rf_imputer.predict(X_missing)\n        \n        if test[feature].isnull().sum() > 0:\n            X_test_missing = test_feature[features_for_imputation].fillna(train_feature[features_for_imputation].median())\n            test_imputed.loc[test[feature].isnull(), feature] = rf_imputer.predict(X_test_missing.loc[test[feature].isnull()])\n        \n        print(f\"Imputed {feature}: {train[feature].isnull().sum()} values in train, {test[feature].isnull().sum()} values in test\")\n        \nX = train_imputed.drop(['SalePrice', 'Id'], axis=1)\ny = train_imputed['SalePrice']\nX_test = test_imputed.drop(['Id'], axis=1)\nnumerical_cols = X.select_dtypes(include=['int64', 'float64']).columns\ncategorical_cols = X.select_dtypes(include=['object']).columns\nnumerical_transformer = Pipeline(steps=[\n    ('scaler', StandardScaler()) \n])\ncategorical_transformer = Pipeline(steps=[\n    ('imputer', SimpleImputer(strategy='most_frequent')),\n    ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))\n])\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_transformer, numerical_cols),\n        ('cat', categorical_transformer, categorical_cols)\n    ])\nmodel = Pipeline(steps=[\n    ('preprocessor', preprocessor),\n    ('regressor', LassoCV(alphas=np.logspace(-4, 1, 100), cv=5))\n])\ny_log = np.log1p(y)\nmodel.fit(X, y_log)\npredictions_log = model.predict(X_test)\npredictions = np.expm1(predictions_log)","metadata":{"trusted":true},"outputs":[],"execution_count":null},{"cell_type":"markdown","source":"# (4): Test Prediction and submission to csv","metadata":{}},{"cell_type":"code","source":"test_predictions_log = model.predict(X_test)\ntest_predictions = np.expm1(test_predictions_log)\nsubmission = pd.DataFrame({\n    'Id': test['Id'],  \n    'SalePrice': test_predictions \n})\nsubmission.to_csv('submission.csv', index=False)","metadata":{"trusted":true},"outputs":[],"execution_count":null}]}